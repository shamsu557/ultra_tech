now update the application.js, server and the apply.html. remember i said weekend session should be remove just add information in the guide frontend, backend and AI starter kit are weekend:
please make sure the data are sent to the students table ophon successifull payment and that alert is shown that application is successiful the allow for the download of the application form
apply.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Application - UltraTech Global Solution LTD</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-custom">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-graduation-cap me-2"></i>
                UltraTech Global Solution
            </a>
            <div class="ms-auto">
                <a href="/" class="btn btn-outline-primary">Back to Home</a>
            </div>
        </div>
    </nav>

    <div class="container mt-5 pt-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card shadow-lg">
                    <div class="card-header bg-primary text-white text-center">
                        <h3><i class="fas fa-user-plus me-2"></i>Student Application</h3>
                        <p class="mb-0">Step 1: Complete your application and pay the application fee of ₦100</p>
                    </div>
                    <div class="card-body p-4">
                        <!-- Application Guide -->
                        <div class="alert alert-info">
                            <h6><i class="fas fa-info-circle me-2"></i>Application Process Guide:</h6>
                            <ol class="mb-0">
                                <li>Fill out the application form below</li>
                                <li>Pay the application fee of ₦100 via Paystack</li>
                                <li>Receive your Application Number and receipt</li>
                                <li>Use your Application Number to complete registration</li>
                            </ol>
                        </div>

                        <form id="applicationForm">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="firstName" class="form-label">First Name *</label>
                                    <input type="text" class="form-control form-control-custom" id="firstName" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="lastName" class="form-label">Last Name *</label>
                                    <input type="text" class="form-control form-control-custom" id="lastName" required>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="email" class="form-label">Email Address *</label>
                                    <input type="email" class="form-control form-control-custom" id="email" required>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="phone" class="form-label">Phone Number *</label>
                                    <input type="tel" class="form-control form-control-custom" id="phone" required>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="gender" class="form-label">Gender *</label>
                                    <select class="form-select form-control-custom" id="gender" required>
                                        <option value="">Select Gender</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                    </select>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="dateOfBirth" class="form-label">Date of Birth *</label>
                                    <input type="date" class="form-control form-control-custom" id="dateOfBirth" required>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="address" class="form-label">Address *</label>
                                <textarea class="form-control form-control-custom" id="address" rows="3" required></textarea>
                            </div>

                            <div class="mb-3">
                                <label for="courseId" class="form-label">Select Course *</label>
                                <select class="form-select form-control-custom" id="courseId" required>
                                    <option value="">Loading courses...</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="schedule" class="form-label">Preferred Schedule *</label>
                                <select class="form-select form-control-custom" id="schedule" required>
                                    <option value="">Select Schedule</option>
                                    <option value="morning">Morning Classes</option>
                                    <option value="evening">Evening Classes</option>
                                    <option value="weekend">Weekend Classes</option>
                                </select>
                                <small class="text-muted" id="scheduleNote">Note: Web Development and AI courses are only available on weekends</small>
                            </div>

                            <div class="alert alert-warning">
                                <h6><i class="fas fa-credit-card me-2"></i>Application Fee: ₦100</h6>
                                <p class="mb-0">You will be redirected to Paystack to complete your payment securely.</p>
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary-custom btn-lg">
                                    <i class="fas fa-credit-card me-2"></i>
                                    Submit Application & Pay ₦100
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Already Applied Section -->
                <div class="card mt-4">
                    <div class="card-body text-center">
                        <h6>Already applied?</h6>
                        <p class="text-muted">Use your Application Number to complete registration</p>
                        <a href="/student/register" class="btn btn-outline-primary">Complete Registration</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Modal -->
    <div class="modal fade" id="successModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title"><i class="fas fa-check-circle me-2"></i>Application Successful!</h5>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-3">
                        <i class="fas fa-file-alt fa-3x text-success mb-3"></i>
                        <h4>Your Application Number:</h4>
                        <h2 class="text-primary" id="applicationNumber"></h2>
                    </div>
                    <p>Please save this Application Number. You will need it to complete your registration.</p>
                    <div class="d-grid gap-2">
                        <button class="btn btn-success" onclick="downloadReceipt()">
                            <i class="fas fa-download me-2"></i>Download Application Form
                        </button>
                        <a href="/student/register" class="btn btn-primary">
                            Complete Registration Now
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Paystack JS -->
    <script src="https://js.paystack.co/v1/inline.js"></script>
    <!-- Custom JS -->
    <script src="/js/main.js"></script>
    <script src="/js/application.js"></script>
</body>
</html>
application.js:
document.addEventListener("DOMContentLoaded", () => {
    loadCourses();
    setupApplicationForm();
    setupCourseScheduleRestriction();
});

// Load courses for selection
async function loadCourses() {
    const courseSelect = document.getElementById("courseId");
    try {
        const response = await fetch("/api/courses");
        const courses = await response.json();
        courseSelect.innerHTML = '<option value="">Select a course</option>';
        courses.forEach((course) => {
            courseSelect.innerHTML += `<option value="${course.id}" data-department="${course.department}">${course.name} (${course.duration})</option>`;
        });
    } catch (error) {
        console.error("Error loading courses:", error);
        courseSelect.innerHTML = '<option value="">Error loading courses</option>';
    }
}

// Set up schedule options and notes
function setupCourseScheduleRestriction() {
    const courseSelect = document.getElementById("courseId");
    const scheduleSelect = document.getElementById("schedule");
    const scheduleNote = document.getElementById("scheduleNote");

    // Always show all schedule options
    scheduleSelect.innerHTML = `
        <option value="">Select Schedule</option>
        <option value="morning">Morning Classes</option>
        <option value="evening">Evening Classes</option>
        <option value="weekend">Weekend Classes</option>
    `;
    scheduleNote.textContent = "Note: Web Development and AI courses are only available on weekends";

    courseSelect.addEventListener("change", () => {
        const selectedOption = courseSelect.options[courseSelect.selectedIndex];
        const department = selectedOption ? selectedOption.getAttribute("data-department") : "";
        if (department === "Web Development" || department === "AI") {
            scheduleNote.textContent = "Note: This course is only available on weekends";
        } else {
            scheduleNote.textContent = "Note: Select your preferred schedule";
        }
    });
}

// Validate form fields
function validateForm(form) {
    const inputs = form.querySelectorAll("input[required], select[required]");
    let isValid = true;
    inputs.forEach((input) => {
        if (!input.value.trim()) {
            input.classList.add("is-invalid");
            let errorDiv = input.nextElementSibling;
            if (!errorDiv || !errorDiv.classList.contains("invalid-feedback")) {
                errorDiv = document.createElement("div");
                errorDiv.className = "invalid-feedback";
                input.parentNode.insertBefore(errorDiv, input.nextSibling);
            }
            errorDiv.textContent = `Please enter your ${input.id}`;
            isValid = false;
        } else {
            input.classList.remove("is-invalid");
            const errorDiv = input.nextElementSibling;
            if (errorDiv && errorDiv.classList.contains("invalid-feedback")) {
                errorDiv.textContent = "";
            }
        }
    });
    return isValid;
}

// Show alert messages
function showMessage(message, type) {
    const alertContainer = document.getElementById("alertContainer") || document.createElement("div");
    alertContainer.id = "alertContainer";
    alertContainer.innerHTML = `<div class="alert alert-${type}" role="alert">${message}</div>`;
    if (!document.getElementById("alertContainer")) {
        document.querySelector(".card-body").prepend(alertContainer);
    }
}

// Set button loading state
function setLoadingState(button, isLoading, originalText) {
    if (isLoading) {
        button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading...';
        button.disabled = true;
    } else {
        button.innerHTML = originalText;
        button.disabled = false;
    }
}

// Generate unique reference
function generateReference(prefix) {
    return `${prefix}-${Math.floor(Math.random() * 1000000)}`;
}

// Setup application form
function setupApplicationForm() {
    const form = document.getElementById("applicationForm");
    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (!validateForm(form)) {
            showMessage("Please fill in all required fields", "danger");
            return;
        }

        // Check schedule restriction
        const courseSelect = document.getElementById("courseId");
        const selectedOption = courseSelect.options[courseSelect.selectedIndex];
        const department = selectedOption.getAttribute("data-department");
        const schedule = document.getElementById("schedule").value;
        if ((department === "Web Development" || department === "AI") && schedule !== "weekend") {
            showMessage("Selected course is only available on weekends. Please choose Weekend Classes.", "danger");
            return;
        }

        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        setLoadingState(submitBtn, true, originalText);

        try {
            const applicationData = {
                firstName: document.getElementById("firstName").value.trim(),
                lastName: document.getElementById("lastName").value.trim(),
                email: document.getElementById("email").value.trim(),
                phone: document.getElementById("phone").value.trim(),
                gender: document.getElementById("gender").value,
                dateOfBirth: document.getElementById("dateOfBirth").value,
                address: document.getElementById("address").value.trim(),
                courseId: document.getElementById("courseId").value,
                schedule: document.getElementById("schedule").value,
            };

            const applicationNumber = "APP" + Date.now();
            initializeApplicationPayment(applicationNumber, applicationData);
        } catch (error) {
            console.error("Application error:", error);
            showMessage(error.message || "Application failed. Please try again.", "danger");
        } finally {
            setLoadingState(submitBtn, false, originalText);
        }
    });
}

// Initialize Paystack payment
function initializeApplicationPayment(applicationNumber, applicationData) {
    const handler = PaystackPop.setup({
        key: "pk_live_e6942e61f70c87019cbeb64ffed04e10fbd2ee10",
        email: applicationData.email || "info@ultratech.com",
        amount: 10000, // ₦100 in kobo
        currency: "NGN",
        ref: generateReference("APP"),
        metadata: {
            application_number: applicationNumber,
            first_name: applicationData.firstName,
            last_name: applicationData.lastName,
            phone: applicationData.phone,
            gender: applicationData.gender,
            date_of_birth: applicationData.dateOfBirth,
            address: applicationData.address,
            course_id: applicationData.courseId,
            schedule: applicationData.schedule,
        },
        callback: (response) => {
            verifyApplicationPayment(response.reference, applicationNumber);
        },
        onClose: () => {
            showMessage("Payment cancelled", "warning");
        },
    });

    try {
        handler.openIframe();
    } catch (error) {
        console.error("Payment initialization error:", error);
        showMessage("Failed to initialize payment. Please try again.", "danger");
    }
}

// Verify payment
async function verifyApplicationPayment(reference, applicationNumber) {
    try {
        const response = await fetch("/api/payment/verify", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ reference, paymentType: "Application" }),
        });

        const result = await response.json();
        if (result.success) {
            document.getElementById("applicationNumber").textContent = applicationNumber;
            alert(`Application Successful! Your Application Number is ${applicationNumber}. Please save it for registration.`);
            const successModal = new bootstrap.Modal(document.getElementById("successModal"));
            successModal.show();
            sessionStorage.setItem("applicationNumber", applicationNumber);
            sessionStorage.setItem("paymentReference", reference);
        } else {
            throw new Error(result.error || "Payment verification failed");
        }
    } catch (error) {
        console.error("Payment verification error:", error);
        showMessage("Payment verification failed. Please contact support.", "danger");
    }
}

// Download receipt
function downloadReceipt() {
    const applicationNumber = sessionStorage.getItem("applicationNumber");
    const reference = sessionStorage.getItem("paymentReference");
    if (applicationNumber && reference) {
        window.open(`/api/receipt/download?type=application&ref=${reference}&appNum=${applicationNumber}`, "_blank");
    } else {
        showMessage("Receipt information not found", "danger");
    }
}
server:
const express = require("express")
const mysql = require("mysql")
const session = require("express-session")
const multer = require("multer")
const path = require("path")
const fs = require("fs")
const db= require('./mysql')
const axios = require('axios');
const PDFDocument = require('pdfkit');
const app = express()
const PORT = process.env.PORT || 3000

const PAYSTACK_SECRET_KEY = 'your_paystack_secret_key_here'; // Replace with your actual Paystack secret key

// Middleware
app.use(express.json())
app.use(express.urlencoded({ extended: true }))
app.use(express.static("public"))

// Session configuration
app.use(
  session({
    secret: process.env.SESSION_SECRET || "ultratech-school-management-secret",
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: false, // Set to true in production with HTTPS
      maxAge: 24 * 60 * 60 * 1000, // 24 hours
    },
  }),
)

// File upload configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = "public/uploads/"
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true })
    }
    cb(null, uploadPath)
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9)
    cb(null, file.fieldname + "-" + uniqueSuffix + path.extname(file.originalname))
  },
})

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|pdf|doc|docx|zip/
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase())
    const mimetype = allowedTypes.test(file.mimetype)

    if (mimetype && extname) {
      return cb(null, true)
    } else {
      cb(new Error("Invalid file type"))
    }
  },
})

// Create application_payments table if not exists
db.query(`
  CREATE TABLE IF NOT EXISTS application_payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    application_number VARCHAR(255) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    reference_number VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(255),
    phone VARCHAR(50),
    gender ENUM('Male', 'Female'),
    date_of_birth DATE,
    address TEXT,
    course_id INT,
    schedule VARCHAR(50),
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) DEFAULT 'Completed'
  )
`, (err) => {
  if (err) console.error('Error creating application_payments table:', err);
});

// Routes

// Homepage
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"))
})

// Student routes
app.get("/student/apply", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "student", "apply.html"))
})

app.get("/student/register", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "student", "register.html"))
})

app.get("/student/login", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "student", "login.html"))
})

app.get("/student/dashboard", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "student", "dashboard.html"))
})

// Staff routes
app.get("/staff-signup", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "staff", "signup.html"))
})

app.get("/staff/login", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "staff", "login.html"))
})

app.get("/staff/dashboard", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "staff", "dashboard.html"))
})

// Admin routes
app.get("/admin/login", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "admin", "login.html"))
})

app.get("/admin/dashboard", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "admin", "dashboard.html"))
})

// API Routes

// Get all courses
app.get("/api/courses", (req, res) => {
  const query = "SELECT * FROM courses ORDER BY name"
  db.query(query, (err, results) => {
    if (err) {
      console.error("Error fetching courses:", err)
      return res.status(500).json({ error: "Database error" })
    }
    res.json(results)
  })
})

// Verify application
app.get("/api/student/verify-application/:applicationNumber", (req, res) => {
  const { applicationNumber } = req.params

  const query = `SELECT s.*, c.name as course_name 
                 FROM students s 
                 JOIN courses c ON s.course_id = c.id 
                 WHERE s.application_number = ? AND s.status = 'Applied'`

  db.query(query, [applicationNumber], (err, results) => {
    if (err) {
      console.error("Error verifying application:", err)
      return res.status(500).json({ error: "Database error" })
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "Application not found or already processed" })
    }

    res.json({
      success: true,
      student: results[0],
    })
  })
})

// Setup security
app.post("/api/student/setup-security", async (req, res) => {
  const { studentId, password, securityQuestion, securityAnswer } = req.body

  try {
    const hashedPassword = await bcrypt.hash(password, 10)

    const query = `UPDATE students 
                   SET password_hash = ?, security_question = ?, security_answer = ?
                   WHERE id = ?`

    db.query(query, [hashedPassword, securityQuestion, securityAnswer, studentId], (err, result) => {
      if (err) {
        console.error("Error setting up security:", err)
        return res.status(500).json({ error: "Database error" })
      }

      res.json({ success: true })
    })
  } catch (error) {
    console.error("Error hashing password:", error)
    res.status(500).json({ error: "Server error" })
  }
})

// Complete registration
app.post(
  "/api/student/complete-registration",
  upload.fields([
    { name: "highestQualification", maxCount: 1 },
    { name: "additionalQualFile_0", maxCount: 1 },
    { name: "additionalQualFile_1", maxCount: 1 },
    { name: "additionalQualFile_2", maxCount: 1 },
  ]),
  async (req, res) => {
    const { studentId } = req.body

    try {
      // Get student and course info for admission number generation
      const studentQuery = `SELECT s.*, c.abbreviation, c.certification_type 
                          FROM students s 
                          JOIN courses c ON s.course_id = c.id 
                          WHERE s.id = ?`

      db.query(studentQuery, [studentId], (err, studentResults) => {
        if (err || studentResults.length === 0) {
          return res.status(500).json({ error: "Student not found" })
        }

        const student = studentResults[0]
        const admissionNumber = generateAdmissionNumber(
          student.abbreviation,
          student.certification_type === "Certificate" ? "CERT" : "DIP",
        )

        // Update student with admission number and status
        const updateQuery = `UPDATE students 
                           SET admission_number = ?, status = 'Registered', highest_qualification = ?
                           WHERE id = ?`

        const highestQualPath = req.files.highestQualification ? req.files.highestQualification[0].path : null

        db.query(updateQuery, [admissionNumber, highestQualPath, studentId], (err, result) => {
          if (err) {
            console.error("Error completing registration:", err)
            return res.status(500).json({ error: "Database error" })
          }

          // Save additional qualifications
          const qualPromises = []
          for (let i = 0; i < 3; i++) {
            const qualName = req.body[`additionalQualName_${i}`]
            const qualFile = req.files[`additionalQualFile_${i}`]

            if (qualName && qualFile) {
              const qualQuery = `INSERT INTO qualifications (student_id, qualification_name, file_path, is_highest) 
                               VALUES (?, ?, ?, false)`
              qualPromises.push(
                new Promise((resolve, reject) => {
                  db.query(qualQuery, [studentId, qualName, qualFile[0].path], (err, result) => {
                    if (err) reject(err)
                    else resolve(result)
                  })
                }),
              )
            }
          }

          Promise.all(qualPromises)
            .then(() => {
              res.json({
                success: true,
                admissionNumber: admissionNumber,
              })
            })
            .catch((error) => {
              console.error("Error saving qualifications:", error)
              res.json({
                success: true,
                admissionNumber: admissionNumber,
                warning: "Registration complete but some qualifications failed to save",
              })
            })
        })
      })
    } catch (error) {
      console.error("Error completing registration:", error)
      res.status(500).json({ error: "Server error" })
    }
  },
)

// Student login
app.post("/api/student/login", async (req, res) => {
  const { username, password } = req.body

  try {
    // Check if it's application number (no password required) or admission number
    let query
    if (!password) {
      // Application number login
      query = `SELECT * FROM students WHERE application_number = ? AND status = 'Applied'`
    } else {
      // Admission number login
      query = `SELECT * FROM students WHERE admission_number = ? AND status IN ('Registered', 'Active')`
    }

    db.query(query, [username], async (err, results) => {
      if (err) {
        console.error("Error during login:", err)
        return res.status(500).json({ error: "Database error" })
      }

      if (results.length === 0) {
        return res.status(401).json({ error: "Invalid credentials" })
      }

      const student = results[0]

      // If password provided, verify it
      if (password && student.password_hash) {
        const isValidPassword = await bcrypt.compare(password, student.password_hash)
        if (!isValidPassword) {
          return res.status(401).json({ error: "Invalid credentials" })
        }
      }

      // Create session
      req.session.studentId = student.id
      req.session.studentType = student.status === "Applied" ? "applicant" : "registered"

      res.json({
        success: true,
        student: {
          id: student.id,
          name: `${student.first_name} ${student.last_name}`,
          status: student.status,
          applicationNumber: student.application_number,
          admissionNumber: student.admission_number,
        },
      })
    })
  } catch (error) {
    console.error("Login error:", error)
    res.status(500).json({ error: "Server error" })
  }
})

// Get security question
app.get("/api/student/security-question/:username", (req, res) => {
  const { username } = req.params

  const query = `SELECT security_question FROM students WHERE admission_number = ?`

  db.query(query, [username], (err, results) => {
    if (err) {
      console.error("Error getting security question:", err)
      return res.status(500).json({ error: "Database error" })
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "Student not found" })
    }

    res.json({
      success: true,
      securityQuestion: results[0].security_question,
    })
  })
})

// Reset password
app.post("/api/student/reset-password", async (req, res) => {
  const { username, securityAnswer, newPassword } = req.body

  try {
    // Verify security answer
    const query = `SELECT id, security_answer FROM students WHERE admission_number = ?`

    db.query(query, [username], async (err, results) => {
      if (err) {
        console.error("Error during password reset:", err)
        return res.status(500).json({ error: "Database error" })
      }

      if (results.length === 0) {
        return res.status(404).json({ error: "Student not found" })
      }

      const student = results[0]

      if (student.security_answer !== securityAnswer) {
        return res.status(401).json({ error: "Incorrect security answer" })
      }

      // Hash new password and update
      const hashedPassword = await bcrypt.hash(newPassword, 10)
      const updateQuery = `UPDATE students SET password_hash = ? WHERE id = ?`

      db.query(updateQuery, [hashedPassword, student.id], (err, result) => {
        if (err) {
          console.error("Error updating password:", err)
          return res.status(500).json({ error: "Database error" })
        }

        res.json({ success: true })
      })
    })
  } catch (error) {
    console.error("Password reset error:", error)
    res.status(500).json({ error: "Server error" })
  }
})

// Payment verification
app.post("/api/payment/verify", async (req, res) => {
  const { reference, paymentType } = req.body;

  const transaction = await verifyPaystackPayment(reference);

  if (!transaction || transaction.status !== 'success') {
    return res.status(400).json({ error: "Payment verification failed" });
  }

  const amount = transaction.amount / 100;

  if (paymentType === "Application") {
    const metadata = transaction.metadata;
    const applicationNumber = metadata.application_number;

    // Insert into students
    const query = `INSERT INTO students (application_number, first_name, last_name, email, phone, gender, date_of_birth, address, course_id, schedule, status) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'Applied')`;

    db.query(query, [applicationNumber, metadata.first_name, metadata.last_name, transaction.email, metadata.phone, metadata.gender, metadata.date_of_birth, metadata.address, metadata.course_id, metadata.schedule], (err, result) => {
      if (err) {
        if (err.code === "ER_DUP_ENTRY") {
          return res.status(400).json({ error: "Email already exists" });
        }
        console.error("Error creating application:", err);
        return res.status(500).json({ error: "Database error" });
      }

      // Insert into application_payments
      const paymentQuery = `INSERT INTO application_payments (application_number, amount, reference_number, first_name, last_name, email, phone, gender, date_of_birth, address, course_id, schedule)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;

      db.query(paymentQuery, [applicationNumber, amount, reference, metadata.first_name, metadata.last_name, transaction.email, metadata.phone, metadata.gender, metadata.date_of_birth, metadata.address, metadata.course_id, metadata.schedule], (err, paymentResult) => {
        if (err) {
          console.error("Error inserting payment:", err);
        }

        res.json({ success: true, applicationNumber });
      });
    });
  } else {
    // Handle other payment types (e.g., existing logic)
    const installmentNumber = paymentType === "Application" ? 1 : installmentType === "full" ? 1 : 1;
    const totalInstallments = paymentType === "Application" ? 1 : installmentType === "full" ? 1 : 2;

    const paymentQuery = `INSERT INTO payments (student_id, payment_type, amount, reference_number, installment_number, total_installments, status) 
                          VALUES (?, ?, ?, ?, ?, ?, 'Completed')`;

    db.query(
      paymentQuery,
      [studentId, paymentType, amount, reference, installmentNumber, totalInstallments],
      (err, result) => {
        if (err) {
          console.error("Error recording payment:", err)
          return res.status(500).json({ error: "Payment recording failed" })
        }

        res.json({ success: true })
      },
    )
  }
});

// Download receipt
app.get("/api/receipt/download", (req, res) => {
  const { type, ref, appNum } = req.query;
  if (type !== 'application') return res.status(400).json({error: 'Invalid type'});

  const query = `SELECT ap.*, c.name as course_name FROM application_payments ap LEFT JOIN courses c ON ap.course_id = c.id WHERE application_number = ? AND reference_number = ?`;

  db.query(query, [appNum, ref], (err, results) => {
    if (err || results.length === 0) return res.status(404).json({error: 'Not found'});

    const payment = results[0];

    const doc = new PDFDocument();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="application_form_${appNum}.pdf"`);
    doc.pipe(res);

    doc.fontSize(25).text('UltraTech Global Solution LTD');
    doc.fontSize(18).text('Application Form and Payment Receipt');
    doc.moveDown();
    doc.fontSize(12).text(`Application Number: ${payment.application_number}`);
    doc.text(`Name: ${payment.first_name} ${payment.last_name}`);
    doc.text(`Email: ${payment.email}`);
    doc.text(`Phone: ${payment.phone}`);
    doc.text(`Gender: ${payment.gender}`);
    doc.text(`Date of Birth: ${payment.date_of_birth}`);
    doc.text(`Address: ${payment.address}`);
    doc.text(`Course: ${payment.course_name || 'Unknown'}`);
    doc.text(`Schedule: ${payment.schedule}`);
    doc.moveDown();
    doc.text(`Payment Amount: ₦${payment.amount}`);
    doc.text(`Reference: ${payment.reference_number}`);
    doc.text(`Payment Date: ${payment.payment_date}`);
    doc.end();
  });
});

// Student dashboard API endpoints

// Student profile endpoint
app.get("/api/student/profile", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const query = `SELECT s.*, c.name as course_name 
                 FROM students s 
                 LEFT JOIN courses c ON s.course_id = c.id 
                 WHERE s.id = ?`

  db.query(query, [req.session.studentId], (err, results) => {
    if (err) {
      console.error("Error fetching student profile:", err)
      return res.status(500).json({ error: "Database error" })
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "Student not found" })
    }

    const student = results[0]
    delete student.password_hash // Don't send password hash
    delete student.security_answer // Don't send security answer

    res.json({ success: true, student })
  })
})

// Student overview data
app.get("/api/student/overview", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const studentId = req.session.studentId

  // Get overview statistics
  const statsQuery = `
    SELECT 
      (SELECT COUNT(*) FROM assignments a 
       JOIN students s ON s.course_id = a.course_id 
       WHERE s.id = ?) as totalAssignments,
      (SELECT COUNT(*) FROM assignment_submissions asub 
       WHERE asub.student_id = ?) as completedAssignments,
      (SELECT COUNT(*) FROM exams e 
       JOIN students s ON s.course_id = e.course_id 
       WHERE s.id = ? AND e.scheduled_date > NOW() AND e.is_active = 1) as upcomingExams
  `

  db.query(statsQuery, [studentId, studentId, studentId], (err, statsResults) => {
    if (err) {
      console.error("Error fetching overview stats:", err)
      return res.status(500).json({ error: "Database error" })
    }

    const stats = statsResults[0]
    stats.overallGrade = 0 // Will be calculated based on actual results

    // Get recent activities
    const activitiesQuery = `
      SELECT 'assignment' as type, a.title, 'New assignment posted' as description, a.created_at
      FROM assignments a 
      JOIN students s ON s.course_id = a.course_id 
      WHERE s.id = ?
      UNION ALL
      SELECT 'payment' as type, CONCAT(p.payment_type, ' Payment') as title, 
             CONCAT('Payment of ₦', p.amount, ' completed') as description, p.payment_date as created_at
      FROM payments p 
      WHERE p.student_id = ?
      ORDER BY created_at DESC 
      LIMIT 10
    `

    db.query(activitiesQuery, [studentId, studentId], (err, activitiesResults) => {
      if (err) {
        console.error("Error fetching activities:", err)
        return res.status(500).json({ error: "Database error" })
      }

      res.json({
        success: true,
        stats,
        recentActivities: activitiesResults,
      })
    })
  })
})

// Student payments
app.get("/api/student/payments", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const paymentsQuery = `SELECT * FROM payments WHERE student_id = ? ORDER BY payment_date DESC`

  db.query(paymentsQuery, [req.session.studentId], (err, payments) => {
    if (err) {
      console.error("Error fetching payments:", err)
      return res.status(500).json({ error: "Database error" })
    }

    // Check for outstanding payments
    const outstanding = []

    // Check if registration payment is complete
    const registrationPayments = payments.filter((p) => p.payment_type === "Registration")
    const totalRegistrationPaid = registrationPayments.reduce((sum, p) => sum + Number.parseFloat(p.amount), 0)

    if (totalRegistrationPaid < 500) {
      outstanding.push({
        type: "Registration",
        amount: 500 - totalRegistrationPaid,
        description: "Complete your registration payment",
        dueDate: null,
      })
    }

    res.json({
      success: true,
      payments,
      outstanding,
    })
  })
})

// Student assignments
app.get("/api/student/assignments", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const assignmentsQuery = `
    SELECT a.*, asub.id as submission_id, asub.file_path as submission_file, 
           asub.submission_date, asub.score, asub.feedback
    FROM assignments a
    JOIN students s ON s.course_id = a.course_id
    LEFT JOIN assignment_submissions asub ON asub.assignment_id = a.id AND asub.student_id = s.id
    WHERE s.id = ?
    ORDER BY a.date_given DESC
  `

  db.query(assignmentsQuery, [req.session.studentId], (err, results) => {
    if (err) {
      console.error("Error fetching assignments:", err)
      return res.status(500).json({ error: "Database error" })
    }

    const assignments = results.map((row) => ({
      id: row.id,
      title: row.title,
      description: row.description,
      instructions: row.instructions,
      date_given: row.date_given,
      due_date: row.due_date,
      max_score: row.max_score,
      submission: row.submission_id
        ? {
            id: row.submission_id,
            file_path: row.submission_file,
            submission_date: row.submission_date,
            score: row.score,
            feedback: row.feedback,
          }
        : null,
    }))

    res.json({ success: true, assignments })
  })
})

// Submit assignment
app.post("/api/student/submit-assignment", upload.single("file"), (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const { assignmentId, notes } = req.body
  const filePath = req.file ? req.file.path : null

  if (!filePath) {
    return res.status(400).json({ error: "No file uploaded" })
  }

  const query = `INSERT INTO assignment_submissions (assignment_id, student_id, file_path, submission_date) 
                 VALUES (?, ?, ?, NOW())`

  db.query(query, [assignmentId, req.session.studentId, filePath], (err, result) => {
    if (err) {
      console.error("Error submitting assignment:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({ success: true })
  })
})

// Student results
app.get("/api/student/results", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const resultsQuery = `
    SELECT 
      AVG(CASE WHEN asub.score IS NOT NULL THEN (asub.score / a.max_score) * 100 END) as assignmentAverage,
      0 as testAverage,
      0 as examAverage
    FROM assignments a
    JOIN students s ON s.course_id = a.course_id
    LEFT JOIN assignment_submissions asub ON asub.assignment_id = a.id AND asub.student_id = s.id
    WHERE s.id = ?
  `

  db.query(resultsQuery, [req.session.studentId], (err, results) => {
    if (err) {
      console.error("Error fetching results:", err)
      return res.status(500).json({ error: "Database error" })
    }

    const result = results[0]
    result.assignmentAverage = Math.round(result.assignmentAverage || 0)

    res.json({
      success: true,
      results: result,
      detailed: [], // Will be populated with actual assessment results
    })
  })
})

// Student exams
app.get("/api/student/exams", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const examsQuery = `
    SELECT e.* FROM exams e
    JOIN students s ON s.course_id = e.course_id
    WHERE s.id = ?
    ORDER BY e.scheduled_date DESC
  `

  const historyQuery = `
    SELECT er.*, e.title as exam_title, e.exam_type
    FROM exam_results er
    JOIN exams e ON e.id = er.exam_id
    WHERE er.student_id = ?
    ORDER BY er.completed_at DESC
  `

  db.query(examsQuery, [req.session.studentId], (err, exams) => {
    if (err) {
      console.error("Error fetching exams:", err)
      return res.status(500).json({ error: "Database error" })
    }

    db.query(historyQuery, [req.session.studentId], (err, history) => {
      if (err) {
        console.error("Error fetching exam history:", err)
        return res.status(500).json({ error: "Database error" })
      }

      res.json({
        success: true,
        exams,
        history,
      })
    })
  })
})

// Update student profile
app.post("/api/student/update-profile", (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const { phone, address } = req.body

  const query = `UPDATE students SET phone = ?, address = ? WHERE id = ?`

  db.query(query, [phone, address, req.session.studentId], (err, result) => {
    if (err) {
      console.error("Error updating profile:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({ success: true })
  })
})

// Update profile picture
app.post("/api/student/update-profile-picture", upload.single("profilePicture"), (req, res) => {
  if (!req.session.studentId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  if (!req.file) {
    return res.status(400).json({ error: "No file uploaded" })
  }

  const profilePicturePath = req.file.path

  const query = `UPDATE students SET profile_picture = ? WHERE id = ?`

  db.query(query, [profilePicturePath, req.session.studentId], (err, result) => {
    if (err) {
      console.error("Error updating profile picture:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({
      success: true,
      profilePicture: profilePicturePath,
    })
  })
})

// Student logout
app.post("/api/student/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("Error destroying session:", err)
      return res.status(500).json({ error: "Logout failed" })
    }
    res.json({ success: true })
  })
})

// Staff API endpoints

// Staff signup
app.post("/api/staff/signup", async (req, res) => {
  const { firstName, lastName, email, phone, department, position, qualifications, password } = req.body

  try {
    const hashedPassword = await bcrypt.hash(password, 10)

    const query = `INSERT INTO staff (first_name, last_name, email, phone, department, position, qualifications, password_hash, status) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'Pending')`

    db.query(
      query,
      [firstName, lastName, email, phone, department, position, qualifications, hashedPassword],
      (err, result) => {
        if (err) {
          console.error("Error creating staff account:", err)
          if (err.code === "ER_DUP_ENTRY") {
            return res.status(400).json({ error: "Email already exists" })
          }
          return res.status(500).json({ error: "Database error" })
        }

        res.json({
          success: true,
          staffId: result.insertId,
        })
      },
    )
  } catch (error) {
    console.error("Staff signup error:", error)
    res.status(500).json({ error: "Server error" })
  }
})

// Staff login
app.post("/api/staff/login", async (req, res) => {
  const { email, password } = req.body

  try {
    const query = `SELECT * FROM staff WHERE email = ? AND status IN ('Active', 'Pending')`

    db.query(query, [email], async (err, results) => {
      if (err) {
        console.error("Error during staff login:", err)
        return res.status(500).json({ error: "Database error" })
      }

      if (results.length === 0) {
        return res.status(401).json({ error: "Invalid credentials" })
      }

      const staff = results[0]

      if (staff.status === "Pending") {
        return res.status(401).json({ error: "Account pending approval" })
      }

      const isValidPassword = await bcrypt.compare(password, staff.password_hash)
      if (!isValidPassword) {
        return res.status(401).json({ error: "Invalid credentials" })
      }

      // Create session
      req.session.staffId = staff.id
      req.session.userType = "staff"

      res.json({
        success: true,
        staff: {
          id: staff.id,
          name: `${staff.first_name} ${staff.last_name}`,
          email: staff.email,
          department: staff.department,
          position: staff.position,
        },
      })
    })
  } catch (error) {
    console.error("Staff login error:", error)
    res.status(500).json({ error: "Server error" })
  }
})

// Staff profile
app.get("/api/staff/profile", (req, res) => {
  if (!req.session.staffId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const query = `SELECT id, first_name, last_name, email, phone, department, position, qualifications, status, created_at 
                 FROM staff WHERE id = ?`

  db.query(query, [req.session.staffId], (err, results) => {
    if (err) {
      console.error("Error fetching staff profile:", err)
      return res.status(500).json({ error: "Database error" })
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "Staff not found" })
    }

    res.json({ success: true, staff: results[0] })
  })
})

// Staff overview
app.get("/api/staff/overview", (req, res) => {
  if (!req.session.staffId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const staffId = req.session.staffId

  // Get staff department for filtering
  const staffQuery = `SELECT department FROM staff WHERE id = ?`

  db.query(staffQuery, [staffId], (err, staffResults) => {
    if (err || staffResults.length === 0) {
      return res.status(500).json({ error: "Staff not found" })
    }

    const department = staffResults[0].department

    // Get overview statistics
    const statsQuery = `
      SELECT 
        (SELECT COUNT(*) FROM students s 
         JOIN courses c ON s.course_id = c.id 
         WHERE c.department = ? AND s.status IN ('Registered', 'Active')) as totalStudents,
        (SELECT COUNT(*) FROM assignments a 
         JOIN courses c ON a.course_id = c.id 
         WHERE c.department = ? AND a.due_date > NOW()) as activeAssignments,
        (SELECT COUNT(*) FROM assignment_submissions asub 
         JOIN assignments a ON asub.assignment_id = a.id 
         JOIN courses c ON a.course_id = c.id 
         WHERE c.department = ? AND asub.score IS NULL) as pendingSubmissions,
        (SELECT COUNT(*) FROM exams e 
         JOIN courses c ON e.course_id = c.id 
         WHERE c.department = ? AND e.scheduled_date > NOW() AND e.is_active = 1) as upcomingExams
    `

    db.query(statsQuery, [department, department, department, department], (err, statsResults) => {
      if (err) {
        console.error("Error fetching staff overview stats:", err)
        return res.status(500).json({ error: "Database error" })
      }

      const stats = statsResults[0]

      // Get recent activities
      const activitiesQuery = `
        SELECT 'assignment' as type, a.title, 'New assignment created' as description, a.created_at
        FROM assignments a 
        JOIN courses c ON a.course_id = c.id 
        WHERE c.department = ? AND a.created_by = ?
        UNION ALL
        SELECT 'submission' as type, CONCAT('Assignment: ', a.title) as title, 
               CONCAT('New submission from ', s.first_name, ' ', s.last_name) as description, asub.submission_date as created_at
        FROM assignment_submissions asub
        JOIN assignments a ON asub.assignment_id = a.id
        JOIN students s ON asub.student_id = s.id
        JOIN courses c ON a.course_id = c.id
        WHERE c.department = ?
        ORDER BY created_at DESC 
        LIMIT 10
      `

      db.query(activitiesQuery, [department, staffId, department], (err, activitiesResults) => {
        if (err) {
          console.error("Error fetching staff activities:", err)
          return res.status(500).json({ error: "Database error" })
        }

        res.json({
          success: true,
          stats,
          recentActivities: activitiesResults,
        })
      })
    })
  })
})

// Staff students
app.get("/api/staff/students", (req, res) => {
  if (!req.session.staffId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const staffId = req.session.staffId

  // Get staff department
  const staffQuery = `SELECT department FROM staff WHERE id = ?`

  db.query(staffQuery, [staffId], (err, staffResults) => {
    if (err || staffResults.length === 0) {
      return res.status(500).json({ error: "Staff not found" })
    }

    const department = staffResults[0].department

    const studentsQuery = `
      SELECT s.*, c.name as course_name 
      FROM students s 
      JOIN courses c ON s.course_id = c.id 
      WHERE c.department = ? 
      ORDER BY s.created_at DESC
    `

    db.query(studentsQuery, [department], (err, results) => {
      if (err) {
        console.error("Error fetching students:", err)
        return res.status(500).json({ error: "Database error" })
      }

      res.json({ success: true, students: results })
    })
  })
})

// Staff assignments
app.get("/api/staff/assignments", (req, res) => {
  if (!req.session.staffId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const staffId = req.session.staffId

  const assignmentsQuery = `
    SELECT a.*, c.name as course_name,
           (SELECT COUNT(*) FROM assignment_submissions asub WHERE asub.assignment_id = a.id) as submission_count
    FROM assignments a 
    JOIN courses c ON a.course_id = c.id 
    WHERE a.created_by = ?
    ORDER BY a.created_at DESC
  `

  db.query(assignmentsQuery, [staffId], (err, results) => {
    if (err) {
      console.error("Error fetching assignments:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({ success: true, assignments: results })
  })
})

// Create assignment
app.post("/api/staff/create-assignment", (req, res) => {
  if (!req.session.staffId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const { title, courseId, description, instructions, dueDate, maxScore } = req.body
  const staffId = req.session.staffId

  const query = `INSERT INTO assignments (title, course_id, description, instructions, due_date, max_score, created_by, date_given) 
                 VALUES (?, ?, ?, ?, ?, ?, ?, NOW())`

  db.query(query, [title, courseId, description, instructions, dueDate, maxScore, staffId], (err, result) => {
    if (err) {
      console.error("Error creating assignment:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({
      success: true,
      assignmentId: result.insertId,
    })
  })
})

// Staff logout
app.post("/api/staff/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("Error destroying staff session:", err)
      return res.status(500).json({ error: "Logout failed" })
    }
    res.json({ success: true })
  })
})

// Admin API endpoints

// Admin login
app.post("/api/admin/login", async (req, res) => {
  const { username, password, role } = req.body

  try {
    const query = `SELECT * FROM admins WHERE username = ? AND role = ? AND status = 'Active'`

    db.query(query, [username, role], async (err, results) => {
      if (err) {
        console.error("Error during admin login:", err)
        return res.status(500).json({ error: "Database error" })
      }

      if (results.length === 0) {
        return res.status(401).json({ error: "Invalid credentials" })
      }

      const admin = results[0]

      const isValidPassword = await bcrypt.compare(password, admin.password_hash)
      if (!isValidPassword) {
        return res.status(401).json({ error: "Invalid credentials" })
      }

      // Create session
      req.session.adminId = admin.id
      req.session.userType = "admin"

      res.json({
        success: true,
        admin: {
          id: admin.id,
          name: `${admin.first_name} ${admin.last_name}`,
          username: admin.username,
          role: admin.role,
        },
      })
    })
  } catch (error) {
    console.error("Admin login error:", error)
    res.status(500).json({ error: "Server error" })
  }
})

// Admin profile
app.get("/api/admin/profile", (req, res) => {
  if (!req.session.adminId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const query = `SELECT id, first_name, last_name, username, email, role, status, created_at 
                 FROM admins WHERE id = ?`

  db.query(query, [req.session.adminId], (err, results) => {
    if (err) {
      console.error("Error fetching admin profile:", err)
      return res.status(500).json({ error: "Database error" })
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "Admin not found" })
    }

    res.json({ success: true, admin: results[0] })
  })
})

// Admin overview
app.get("/api/admin/overview", (req, res) => {
  if (!req.session.adminId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  // Get overview statistics
  const statsQuery = `
    SELECT 
      (SELECT COUNT(*) FROM students WHERE status IN ('Registered', 'Active')) as totalStudents,
      (SELECT COUNT(*) FROM staff WHERE status = 'Active') as activeStaff,
      (SELECT COALESCE(SUM(amount), 0) FROM payments 
       WHERE MONTH(payment_date) = MONTH(CURRENT_DATE()) 
       AND YEAR(payment_date) = YEAR(CURRENT_DATE())) as monthlyRevenue,
      (SELECT COUNT(*) FROM students WHERE status = 'Applied') + 
      (SELECT COUNT(*) FROM staff WHERE status = 'Pending') as pendingApprovals
  `

  db.query(statsQuery, (err, statsResults) => {
    if (err) {
      console.error("Error fetching admin overview stats:", err)
      return res.status(500).json({ error: "Database error" })
    }

    const stats = statsResults[0]

    // Get monthly revenue data for chart
    const revenueQuery = `
      SELECT MONTH(payment_date) as month, SUM(amount) as total
      FROM payments 
      WHERE YEAR(payment_date) = YEAR(CURRENT_DATE())
      GROUP BY MONTH(payment_date)
      ORDER BY month
    `

    db.query(revenueQuery, (err, revenueResults) => {
      if (err) {
        console.error("Error fetching revenue data:", err)
        return res.status(500).json({ error: "Database error" })
      }

      // Create 12-month array with zeros
      const revenueData = new Array(12).fill(0)

      // Fill in actual data
      revenueResults.forEach((row) => {
        revenueData[row.month - 1] = Number.parseFloat(row.total)
      })

      res.json({
        success: true,
        stats,
        revenueData,
      })
    })
  })
})

// Get all students for admin
app.get("/api/admin/students", (req, res) => {
  if (!req.session.adminId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const studentsQuery = `
    SELECT s.*, c.name as course_name 
    FROM students s 
    LEFT JOIN courses c ON s.course_id = c.id 
    ORDER BY s.created_at DESC
  `

  db.query(studentsQuery, (err, results) => {
    if (err) {
      console.error("Error fetching students:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({ success: true, students: results })
  })
})

// Get pending approvals
app.get("/api/admin/pending-approvals", (req, res) => {
  if (!req.session.adminId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const pendingQuery = `
    SELECT s.*, c.name as course_name 
    FROM students s 
    JOIN courses c ON s.course_id = c.id 
    WHERE s.status = 'Applied'
    ORDER BY s.created_at ASC
  `

  db.query(pendingQuery, (err, results) => {
    if (err) {
      console.error("Error fetching pending approvals:", err)
      return res.status(500).json({ error: "Database error" })
    }

    res.json({ success: true, students: results })
  })
})

// Approve student
app.post("/api/admin/approve-student/:studentId", (req, res) => {
  if (!req.session.adminId) {
    return res.status(401).json({ error: "Not authenticated" })
  }

  const { studentId } = req.params

  const query = `UPDATE students SET status = 'Registered' WHERE id = ? AND status = 'Applied'`

  db.query(query, [studentId], (err, result) => {
    if (err) {
      console.error("Error approving student:", err)
      return res.status(500).json({ error: "Database error" })
    }

    if (result.affectedRows === 0) {
      return res.status(404).json({ error: "Student not found or already processed" })
    }

    res.json({ success: true })
  })
})

// Admin logout
app.post("/api/admin/logout", (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      console.error("Error destroying admin session:", err)
      return res.status(500).json({ error: "Logout failed" })
    }
    res.json({ success: true })
  })
})

// Utility function to generate admission number
function generateAdmissionNumber(courseAbbr, certType) {
  const year = new Date().getFullYear()
  const randomNum = Math.floor(Math.random() * 1000)
    .toString()
    .padStart(3, "0")
  return `${courseAbbr}/${year}/${certType}/${randomNum}`
}

// Paystack verification function
async function verifyPaystackPayment(reference) {
  try {
    const response = await axios.get(`https://api.paystack.co/transaction/verify/${reference}`, {
      headers: {
        Authorization: `Bearer ${PAYSTACK_SECRET_KEY}`,
      }
    });
    return response.data.data;
  } catch (error) {
    console.error('Paystack verify error:', error);
    return null;
  }
}

// Error handling middleware
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === "LIMIT_FILE_SIZE") {
      return res.status(400).json({ error: "File too large" })
    }
  }
  res.status(500).json({ error: error.message })
})

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
  console.log(`Access the application at http://localhost:${PORT}`)
})

module.exports = app